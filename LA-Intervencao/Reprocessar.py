#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.13
# In conjunction with Tcl version 8.6
#    Sep 05, 2018 03:30:28 PM

import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

import model.ImportacaoDB as imp

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    top = Agendador_de_sincroniza__o (root)
    root.mainloop()

w = None
def create_Agendador_de_sincroniza__o(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = Agendador_de_sincroniza__o (w)
    return (w, top)

def destroy_Agendador_de_sincroniza__o():
    global w
    w.destroy()
    w = None


class Agendador_de_sincroniza__o:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 

        top.geometry("600x450+385+115")
        top.title("Agendador de sincronização")
        top.configure(background="#d9d9d9")


        self.txtHoraVar = StringVar()
        self.txtHora = Entry(top)
        self.txtHora.place(relx=0.15, rely=0.04,height=20, relwidth=0.19)
        self.txtHora.configure(background="white")
        self.txtHora.configure(disabledforeground="#a3a3a3")
        self.txtHora.configure(font="TkFixedFont")
        self.txtHora.configure(foreground="#000000")
        self.txtHora.configure(insertbackground="black")
        self.txtHora.configure(width=114)
        self.txtHora.configure(textvariable=self.txtHoraVar)

        self.Label1 = Label(top)
        self.Label1.place(relx=0.03, rely=0.04, height=21, width=35)
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(text='''Hora:''')

        self.Labelframe1 = LabelFrame(top)
        self.Labelframe1.place(relx=0.02, rely=0.18, relheight=0.39
                , relwidth=0.3)
        self.Labelframe1.configure(relief=GROOVE)
        self.Labelframe1.configure(foreground="black")
        self.Labelframe1.configure(text='''[ Coleta ]''')
        self.Labelframe1.configure(background="#d9d9d9")
        self.Labelframe1.configure(width=180)

        self.lbColeta = Listbox(self.Labelframe1)
        self.lbColeta.place(relx=0.06, rely=0.17, relheight=0.75, relwidth=0.86
                , y=-12, h=12)
        self.lbColeta.configure(background="white")
        self.lbColeta.configure(disabledforeground="#a3a3a3")
        self.lbColeta.configure(font="TkFixedFont")
        self.lbColeta.configure(foreground="#000000")
        self.lbColeta.configure(width=154)

        self.Labelframe2 = LabelFrame(top)
        self.Labelframe2.place(relx=0.34, rely=0.18, relheight=0.39
                , relwidth=0.3)
        self.Labelframe2.configure(relief=GROOVE)
        self.Labelframe2.configure(foreground="black")
        self.Labelframe2.configure(text='''[ Transformação ]''')
        self.Labelframe2.configure(background="#d9d9d9")
        self.Labelframe2.configure(width=180)

        self.lbTransformacao = Listbox(self.Labelframe2)
        self.lbTransformacao.place(relx=0.06, rely=0.17, relheight=0.75
                , relwidth=0.86, y=-12, h=12)
        self.lbTransformacao.configure(background="white")
        self.lbTransformacao.configure(disabledforeground="#a3a3a3")
        self.lbTransformacao.configure(font="TkFixedFont")
        self.lbTransformacao.configure(foreground="#000000")
        self.lbTransformacao.configure(width=134)

        self.Labelframe3 = LabelFrame(top)
        self.Labelframe3.place(relx=0.66, rely=0.18, relheight=0.39
                , relwidth=0.3)
        self.Labelframe3.configure(relief=GROOVE)
        self.Labelframe3.configure(foreground="black")
        self.Labelframe3.configure(text='''[ Pred. Recom. ]''')
        self.Labelframe3.configure(background="#d9d9d9")
        self.Labelframe3.configure(width=150)

        self.lbPredRecom = Listbox(self.Labelframe3)
        self.lbPredRecom.place(relx=0.06, rely=0.17, relheight=0.75
                , relwidth=0.86, y=-12, h=12)
        self.lbPredRecom.configure(background="white")
        self.lbPredRecom.configure(disabledforeground="#a3a3a3")
        self.lbPredRecom.configure(font="TkFixedFont")
        self.lbPredRecom.configure(foreground="#000000")
        self.lbPredRecom.configure(width=150)

        self.Labelframe4 = LabelFrame(top)
        self.Labelframe4.place(relx=0.02, rely=0.6, relheight=0.37
                , relwidth=0.95)
        self.Labelframe4.configure(relief=GROOVE)
        self.Labelframe4.configure(foreground="black")
        self.Labelframe4.configure(text='''[ Log ]''')
        self.Labelframe4.configure(background="#d9d9d9")
        self.Labelframe4.configure(width=570)

        self.lbLog = Listbox(self.Labelframe4)
        self.lbLog.place(relx=0.02, rely=0.12, relheight=0.8, relwidth=0.95
                , y=-12, h=12)
        self.lbLog.configure(background="white")
        self.lbLog.configure(disabledforeground="#a3a3a3")
        self.lbLog.configure(font="TkFixedFont")
        self.lbLog.configure(foreground="#000000")
        self.lbLog.configure(width=544)

        self.btnReprocessarAgora = Button(top, command=self.clickReprocessar)
        self.btnReprocessarAgora.place(relx=0.4, rely=0.04, height=24, width=137)

        self.btnReprocessarAgora.configure(activebackground="#d9d9d9")
        self.btnReprocessarAgora.configure(activeforeground="#000000")
        self.btnReprocessarAgora.configure(background="#d9d9d9")
        self.btnReprocessarAgora.configure(disabledforeground="#a3a3a3")
        self.btnReprocessarAgora.configure(foreground="#000000")
        self.btnReprocessarAgora.configure(highlightbackground="#d9d9d9")
        self.btnReprocessarAgora.configure(highlightcolor="black")
        self.btnReprocessarAgora.configure(pady="0")
        self.btnReprocessarAgora.configure(text='''Reprocessar Agora''')
        self.btnReprocessarAgora.configure(width=137)

        self.CarregarObjetos()

    def clickReprocessar(self):
        self.lbLog.delete(0, END)
        self.lbLog.insert(END, '====================================================================================')
        print('Reprocessar....')
        self.ReprocessarImportacao()
        self.ReprocessarTransformacao()
        self.ReprocessarPredicaoRecomendacao()
        print('Finalizado reprocessamento...')

    def ReprocessarImportacao(self):
        print('Reprocessar importação...')
        self.lbLog.insert(END, 'Inicio importação...')
        self.lbLog.insert(END, '')
        self.lbLog.insert(END, 'Finalizado importação.')
        self.lbLog.insert(END, '====================================================================================')

    def ReprocessarTransformacao(self):
        print('Reprocessar transformação...')
        self.lbLog.insert(END, 'Reprocessar transformação...')
        self.lbLog.insert(END, '')
        self.lbLog.insert(END, 'Finalizado transformação.')
        self.lbLog.insert(END, '====================================================================================')

    def ReprocessarPredicaoRecomendacao(self):
        print('Reprocessar predição...')
        self.lbLog.insert(END, 'Reprocessar predição...')
        self.lbLog.insert(END, '')
        self.lbLog.insert(END, 'Finalizado predição.')
        self.lbLog.insert(END, '====================================================================================')

        print('Reprocessar recomendações...')
        self.lbLog.insert(END, 'Reprocessar recomendações...')
        self.lbLog.insert(END, '')
        self.lbLog.insert(END, 'Finalizado recomendações.')
        self.lbLog.insert(END, '====================================================================================')

    def CarregarObjetos(self):
        self.lbLog.delete(0, END)
        self.lbColeta.delete(0, END)
        self.lbTransformacao.delete(0, END)
        self.lbPredRecom.delete(0, END)

        listaTabelas = imp.ListarTabelas()
        
        for tabela in listaTabelas:
            if tabela.id_fonte_dados != 99:
                self.lbColeta.insert(END, tabela.nome)

        for tabela in listaTabelas:
            if tabela.id_fonte_dados == 99:
                self.lbTransformacao.insert(END, tabela.nome)

        self.lbPredRecom.insert(END, 'Predição')
        self.lbPredRecom.insert(END, 'Recomendação')

        self.txtHoraVar.set('15:45')



if __name__ == '__main__':
    vp_start_gui()


